var Mock$A = require('../Mock$A').Mock$A,Controller = (function($A) { 'use strict'; return {	testGet: function (component) {				var testAttribute = component.get('v.testAttribute');	},	testSet: function (component) {				component.set('v.testAttribute', 'newValue');	},	testFind: function (component) {		var testElement = component.find('testElement');	},	testHelperGet: function (component, event, helper) {		helper.testGet(component);	},	test$AisUndefined: function (obj) {		$A.util.isUndefined(obj);	},	testEventHandled: function (component) {		component.set('v.eventHandled', true);	},	testSecondEventHandled: function (component) {		component.set('v.secondEventHandled', true);	},	testEventParams: function (component, event) {		component.set('v.testParam', event.getParam('testParam'));	},	testEventParamsHelper: function (component, event, helper) {		helper.setParam(component, event.getParam('testParam'));	},	testStopEventPropagation: function (component, event, helper) {		helper.setParam(component, event.getParam('testParam'));        event.stopPropagation();	}} })(Mock$A()); exports.Controller = Controller; 